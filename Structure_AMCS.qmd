```{python}
import numpy as np
import itertools
from itertools import product
import random
def compute_t_G_W(H, W_block):
    # Compute t for nxn graphon, brute force n^|V(H)| calculations
    n = H.shape[0]
    edges = [(i, j) for i in range(n) for j in range(i + 1, n) if H[i, j] == 1 or H[j, i] == 1]
    num_blocks = W_block.shape[0]
    block_volume = 1.0 / num_blocks
    t = 0.0
    for assignment in product(range(num_blocks), repeat=n):
        prob = 1.0
        for (u, v) in edges:
            prob *= W_block[assignment[u], assignment[v]]
        t += prob * (block_volume ** n)
    return t

def stretch(W, p):
    """
    Given a 4x4 matrix W, return a new matrix where each entry is stretched further from the mean with p as the multiple
    """
    W_stretched = W + (p - 1) * (W - np.mean(W))
    return W_stretched

def sidorenko_ratio(H, W_block):
    # Computes p^|E(H)| / t - 1
    t = compute_t_G_W(H, W_block)
    p = np.mean(W_block)
    num_edges = int(np.sum(H) // 2)
    return np.log(p ** num_edges / t)
```

```{python}
H = np.array([
    [0,0,0,0,0,0,0,1,1,1],  
    [0,0,0,0,0,1,0,0,1,1],  
    [0,0,0,0,0,1,1,0,0,1],  
    [0,0,0,0,0,1,1,1,0,0],  
    [0,0,0,0,0,0,1,1,1,0],  
    [0,1,1,1,0,0,0,0,0,0],  
    [0,0,1,1,1,0,0,0,0,0],  
    [1,0,0,1,1,0,0,0,0,0],  
    [1,1,0,0,1,0,0,0,0,0],  
    [1,1,1,0,0,0,0,0,0,0]
])
W = np.array([
  [9.829822690147628217e-01,1.006239824946722372e+00,9.892987303600105919e-01,1.021524806997454071e+00],
[1.006239824946722372e+00,9.759788132675752959e-01,1.014080386099867059e+00,1.003746041432600267e+00],
[9.892987303600105919e-01,1.014080386099867059e+00,1.018932138361181794e+00,9.777298907830966890e-01],
[1.021524806997454071e+00,1.003746041432600267e+00,9.777298907830966890e-01,9.968674181169788762e-01]
])
sidorenko_ratio(H, stretch(W, 1 / (60 * np.max(abs(W - 1)))))

W = np.array([
[1.008086217686960051e+00,1.006769525428973910e+00,9.915366153722398046e-01,9.936051460927676215e-01],
[1.006769525428973910e+00,9.812253243159484439e-01,1.006088680845625305e+00,1.005917335263637247e+00],
[9.915366153722398046e-01,1.006088680845625305e+00,1.001166744147237608e+00,1.001212472498347328e+00],
[9.936051460927676215e-01,1.005917335263637247e+00,1.001212472498347328e+00,9.992621628466726857e-01]
])
sidorenko_ratio(H, stretch(W, 1 / (60 * np.max(abs(W - 1)))))

W = np.array([
 [9.602514917187326970e-01,1.015286782632627061e+00,1.011833006234631238e+00,1.012574322152577366e+00],
[1.015286782632627061e+00,1.003895567311315684e+00,9.741647409692193449e-01,1.006689663022229508e+00],
[1.011833006234631238e+00,9.741647409692193449e-01,1.012872268312449586e+00,1.001127594711219260e+00],
[1.012574322152577366e+00,1.006689663022229508e+00,1.001127594711219260e+00,9.796284532124968081e-01]
])
sidorenko_ratio(H, stretch(W, 1 / (60 * np.max(abs(W - 1)))))
```

```{python}
W = np.array([
  [9.746938100681739048e-01,1.011048495783134049e+00,1.007385985375905069e+00,1.006898802943898552e+00],
[1.011048495783134049e+00,9.778949562160562659e-01,1.004556144263334838e+00,1.006470554227467895e+00],
[1.007385985375905069e+00,1.004556144263334838e+00,9.796630669374898348e-01,1.008385183820106779e+00],
[1.006898802943898552e+00,1.006470554227467895e+00,1.008385183820106779e+00,9.782578339505850762e-01]
])
sidorenko_ratio(H, stretch(W, 1 / (60 * np.max(abs(W - 1)))))

W = np.array([
  [9.785204923248900233e-01,1.006063664598876972e+00,1.008272758742907005e+00,1.007169217624657831e+00],
[1.006063664598876972e+00,9.809639196219169799e-01,1.006829849932037835e+00,1.006152334412331317e+00],
[1.008272758742907005e+00,1.006829849932037835e+00,9.769347070419951429e-01,1.007911030016080955e+00],
[1.007169217624657831e+00,1.006152334412331317e+00,1.007911030016080955e+00,9.787831703574124687e-01]
])
sidorenko_ratio(H, stretch(W, 1 / (60 * np.max(abs(W - 1)))))
```