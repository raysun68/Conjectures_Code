---
title: "AMCS_Optimizer"
format: pdf
author: "Raymond Sun"
date: "20250617"
editor: visual
---

## Helper Functions

```{python}
import numpy as np
import itertools
from itertools import product
import random
def build_tilde_M(M):
    m, n = M.shape
    mn = m * n
    tilde_M = np.zeros((mn, mn))

    for a in range(m):
        for b in range(n):
            for c in range(m):
                for d in range(n):
                    idx1 = a * n + b
                    idx2 = c * n + d
                    M_cb = M[c, b]
                    M_ab = M[a, b]
                    M_cd = M[c, d]
                    M_ad = M[a, d]
                    product = max(M_ab * M_cd, 0)
                    tilde_M[idx1, idx2] = M_cb * np.sqrt(product) * M_ad

    return tilde_M
def sidorenko_eigenvalue_check(M):
    M = np.maximum(M, 0)
    M = np.nan_to_num(M, nan=0.0, posinf=1.0, neginf=0.0)

    tilde_M = build_tilde_M(M)

    if not np.all(np.isfinite(tilde_M)):
        raise ValueError("tilde_M contains non-finite values!")

    if not np.allclose(tilde_M, tilde_M.T, atol=1e-10):
        print("Warning: tilde_M is not symmetric")

    eigenvalues = np.linalg.eigvalsh(tilde_M)
    lhs = np.sum(eigenvalues**5)
    rhs = (np.sum(M))**15 / (M.size)**10
    return np.log(rhs / lhs)

def compute_t_G_W(H, W_block):
    # Compute t for nxn graphon, brute force n^|V(H)| calculations
    n = H.shape[0]
    edges = [(i, j) for i in range(n) for j in range(i + 1, n) if H[i, j] == 1 or H[j, i] == 1]
    num_blocks = W_block.shape[0]
    block_volume = 1.0 / num_blocks
    t = 0.0
    for assignment in product(range(num_blocks), repeat=n):
        prob = 1.0
        for (u, v) in edges:
            prob *= W_block[assignment[u], assignment[v]]
        t += prob * (block_volume ** n)
    return t

def stretch(W, p):
    """
    Given a 4x4 matrix W, return a new matrix where each entry is stretched further from the mean with p as the multiple
    """
    W_stretched = W + (p - 1) * (W - np.mean(W))
    return W_stretched

def sidorenko_ratio(H, W_block):
    # Computes p^|E(H)| / t - 1
    t = compute_t_G_W(H, W_block)
    p = np.mean(W_block)
    num_edges = int(np.sum(H) // 2)
    return np.log(p ** num_edges / t)
```

## Search Parameters and Logic

Here is some notes on my modification of Iurii's AMCS code:

1.  Run the script with `python amcs_for_graphon_demo.py` , main inputs and parameters to adjust are `H` , `W_initial` , `max_depth`, `max_level`, `max_steps`, `cur_ep`, `min_length` .

2.  Each perturbation step is a random 4\*4 matrix with length (L2 norm) `cur_ep`. After an improving step is found, the next step begins from using 100%, then 90%... of the last successful step mixed with a random step for the first 10 tries. From the current best W, the algorithm makes `level` \* `ep` random steps to search for an improvement, then `depth` + 1. When `depth` reaches `max_depth` , it resets to 0 and lets `level` + 1. When an improvement is found, `depth` is reset to 0 without increasing `level`. When `level` reaches `max_level`, `ep` becomes 80% of its original value (or 60% if there has been no improvement in the last cycle) since the current step may be too large.

3.  Currently the weights stabilize after around 10-15 minutes, while the loop reaches an ending criteria after around an hour. It exits the loop when $\left \lVert W - 1 \right \rVert_\infty < \frac{1}{4m}$ or 3 full loops are run without any improvement. When the first condition is met, usually a Sidorenko ratio around $1.5*10^{-8}$ to $3* 10^{-8}$ is reached.

    This is much smaller than that of a random matrix of similar distance to the uniform weight matrix (around order of $10^{-4}$), but it's yet to be determined if there is some special structure to be found for these optimized matrices and if it holds clues for patterns close to violation.

Potential next steps: H could be changed to test other graphs with 12 or less nodes that haven't been verified, or W could be changed to a 5\*5 graphon (should converge in a few hours with the current framework).

This framework can be extended to optimize for EFX and the Second Neighborhood Conjecture by tweaking the score function and perturbation logic.

Optimization results from final version of AMCS:

```{python}
H = np.array([
    [0,0,0,0,0,0,0,1,1,1],  
    [0,0,0,0,0,1,0,0,1,1],  
    [0,0,0,0,0,1,1,0,0,1],  
    [0,0,0,0,0,1,1,1,0,0],  
    [0,0,0,0,0,0,1,1,1,0],  
    [0,1,1,1,0,0,0,0,0,0],  
    [0,0,1,1,1,0,0,0,0,0],  
    [1,0,0,1,1,0,0,0,0,0],  
    [1,1,0,0,1,0,0,0,0,0],  
    [1,1,1,0,0,0,0,0,0,0]
])
W = np.array([
  [1.006698144463033850e+00,9.828284542082723618e-01,1.006953717554858629e+00,1.003520601558819392e+00],
[9.828284542082723618e-01,1.007337069931104390e+00,1.011365901909568432e+00,9.984762602095663686e-01],
[1.006953717554858629e+00,1.011365901909568432e+00,9.842679968971830284e-01,9.974048044071606167e-01],
[1.003520601558819392e+00,9.984762602095663686e-01,9.974048044071606167e-01,1.000597309012188241e+00]
])
np.round(W, 4)
print(sidorenko_ratio(H, W))
print("\nRow sums:", np.round(W.sum(axis=1), 8))
print("Col sums:", np.round(W.sum(axis=0), 8))
#W_initial = np.array([[0.1, 1.1, 1.3, 1.2],
#[1.1, 1.3, 0.4, 1.1],
#[1.3, 0.4, 0.9, 1.2],
#[1.2, 1.1, 1.2, 0.2]])
#Search complete. Best Sidorenko ratio: -1.7497e-08
#Total elapsed time: 3097.35 seconds
#AMCS_graphon(H, best_W, max_depth= 5, max_level= 8, max_steps = 8, epsilon = 0.3)
#min length = 0.0005

W = np.array([
  [9.870859047315494461e-01,1.012793678182828838e+00,9.894975254113421714e-01,1.010617752083826870e+00],
[1.012793678182828838e+00,1.010332578863655684e+00,9.933433720332041084e-01,9.835060697754934855e-01],
[9.894975254113421714e-01,9.933433720332041084e-01,1.016731641432941036e+00,1.000429702032327395e+00],
[1.010617752083826870e+00,9.835060697754934855e-01,1.000429702032327395e+00,1.005473675933807876e+00]
])
np.round(W, 4)
print(sidorenko_ratio(H, W))
print("\nRow sums:", np.round(W.sum(axis=1), 8))
print("Col sums:", np.round(W.sum(axis=0), 8))
#W_initial = np.array([[0.1, 1.1, 1.3, 0.8],
#[1.1, 0.5, 0.4, 1.1],
#[1.3, 0.4, 0.9, 1.2],
#[0.8, 1.1, 1.2, 1.4]])
#Search complete. Best Sidorenko ratio: -2.9797e-08
#Total elapsed time: 3336.68 seconds
#AMCS_graphon(H, best_W, max_depth= 5, max_level= 8, max_steps = 8, epsilon = 0.3)
#min_length = 0.0005

W = np.array([
  [1.005918364232344153e+00,1.008561605423080598e+00,1.001622593800778116e+00,9.838745226963234725e-01],
[1.008561605423080598e+00,9.956187641638900576e-01,9.862188039403909645e-01,1.009638083189973834e+00],
[1.001622593800778116e+00,9.862188039403909645e-01,1.011966560148175764e+00,1.000195910494968476e+00],
[9.838745226963234725e-01,1.009638083189973834e+00,1.000195910494968476e+00,1.006273272364560212e+00]
])
np.round(W, 4)
print(sidorenko_ratio(H, W))
print("\nRow sums:", np.round(W.sum(axis=1), 8))
print("Col sums:", np.round(W.sum(axis=0), 8))
#W_initial = np.array([[0.1, 1.1, 1.3, 1.2],
#    [1.1, 1.3, 0.4, 1.1],
#    [1.3, 0.4, 0.9, 1.2],
#    [1.2, 1.1, 1.2, 0.2]])
#Early stopping: max|W - 1| < 0.0167
#Search complete. Best Sidorenko ratio: -1.5431e-08
#Total elapsed time: 4420.93 seconds
#AMCS_graphon(H, best_W, max_depth= 10, max_level= 6, max_steps = 8, epsilon = 0.3)
#min_length = 0.0004

W = np.array([
  [9.937669153101358344e-01,1.016135336240906240e+00,9.884566213567120840e-01,1.001630615749603770e+00],
[1.016135336240906240e+00,9.910134625158074639e-01,9.912700210631636422e-01,1.001558727266020687e+00],
[9.884566213567120840e-01,9.912700210631636422e-01,1.007400418292873745e+00,1.012914183393865297e+00],
[1.001630615749603770e+00,1.001558727266020687e+00,1.012914183393865297e+00,9.838881937406414036e-01]
])
np.round(W, 4)
print(sidorenko_ratio(H, W))
print("\nRow sums:", np.round(W.sum(axis=1), 8))
print("Col sums:", np.round(W.sum(axis=0), 8))
#W_initial = np.array([
    #[0.9, 1.1, 1.3, 0.8],
    #[1.1, 0.5, 0.4, 1.4],
    #[1.3, 0.4, 0.9, 0.3],
    #[0.8, 1.4, 0.3, 1.4]])
#Early stopping: max|W - 1| < 0.0167
#Search complete. Best Sidorenko ratio: -2.0361e-08
# AMCS_graphon(H, best_W, max_depth= 10, max_level= 6, max_steps = 10, epsilon = 0.3)
#min_length = 0.0004
#Total elapsed time: 3795.58 seconds

W = np.array([
  [1.003815032309734567e+00,1.002321130250688919e+00,9.802993524557340743e-01,1.013558287856340057e+00],
[1.002321130250688919e+00,9.858945971800775476e-01,1.009930703536328744e+00,1.001860064505293524e+00],
[9.802993524557340743e-01,1.009930703536328744e+00,1.008668286555383764e+00,1.001089088428382290e+00],
[1.013558287856340057e+00,1.001860064505293524e+00,1.001089088428382290e+00,9.835048298892703489e-01]
])
np.round(W, 4)
print(sidorenko_ratio(H, W))
print("\nRow sums:", np.round(W.sum(axis=1), 8))
print("Col sums:", np.round(W.sum(axis=0), 8))
#W_initial = np.array([[0.1, 1.1, 1.3, 1.2],
   # [1.1, 1.3, 0.4, 1.1],
   # [1.3, 0.4, 0.9, 1.2],
   # [1.2, 1.1, 1.2, 0.2]])
#Search complete. Best Sidorenko ratio: -2.6723e-08
# AMCS_graphon(H, best_W, max_depth= 6, max_level= 6, max_steps = 15, epsilon = 0.3)
#min_length = 0.0004
#Total elapsed time: 3778.65 seconds

W = np.array([
  [1.002100188789957658e+00,1.013100042952112645e+00,9.839749790429854759e-01,1.000841600065852210e+00],
[1.013100042952112645e+00,9.962253851697436824e-01,1.005479119659793641e+00,9.851842122305812799e-01],
[9.839749790429854759e-01,1.005479119659793641e+00,1.013067090262603109e+00,9.974714161286379888e-01],
[1.000841600065852210e+00,9.851842122305812799e-01,9.974714161286379888e-01,1.016504595617770290e+00]
])
np.round(W, 4)
print(sidorenko_ratio(H, W))
print("\nRow sums:", np.round(W.sum(axis=1), 8))
print("Col sums:", np.round(W.sum(axis=0), 8))
#W_initial = np.array([
    #[0.9, 1.1, 1.3, 0.8],
    #[1.1, 0.5, 0.4, 1.4],
    #[1.3, 0.4, 0.9, 0.3],
    #[0.8, 1.4, 0.3, 1.4]])
#Early stopping: max|W - 1| < 0.0167

#Search complete. Best Sidorenko ratio: -2.2294e-08
#AMCS_graphon(H, best_W, max_depth= 8, max_level= 10, max_steps = 5, epsilon = 0.3)
# min_length = 0.0004
#Total elapsed time: 4691.44 seconds

W = np.array([
  [9.981881920952020426e-01,9.960787975368707858e-01,9.916104719947598234e-01,1.014137493442902382e+00],
[9.960787975368707858e-01,9.933978260588319786e-01,1.001361925434438804e+00,1.009160644897071579e+00],
[9.916104719947598234e-01,1.001361925434438804e+00,1.016594404767061866e+00,9.904346735719898875e-01],
[1.014137493442902382e+00,1.009160644897071579e+00,9.904346735719898875e-01,9.862515633228388090e-01]
])
sidorenko_ratio(H, W)
print("\nRow sums:", np.round(W.sum(axis=1), 8))
print("Col sums:", np.round(W.sum(axis=0), 8))
#W_initial = np.array([[0.8, 1.1, 1.3, 1.2],
   # [1.1, 1.3, 0.4, 1.1],
  #  [1.3, 0.4, 0.4, 1.2],
  #  [1.2, 1.1, 1.2, 0.2]])
#Early stopping: max|W - 1| < 0.0167
#AMCS_graphon(H, best_W, max_depth= 12, max_level= 8, max_steps = 5, epsilon = cur_ep)
#Search complete. Best Sidorenko ratio: -2.0376e-08
#Total elapsed time: 2876.20 seconds
W = np.array([
  [1.016419620457121642e+00,9.954765866793205964e-01,9.924696619845138068e-01,9.956573914270188119e-01],
[9.954765866793205964e-01,9.933100787557884725e-01,1.016065556720054497e+00,9.951186923973119880e-01],
[9.924696619845138068e-01,1.016065556720054497e+00,9.972592334223361332e-01,9.942118906824225499e-01],
[9.956573914270188119e-01,9.951186923973119880e-01,9.942118906824225499e-01,1.015011507583468475e+00]
])
np.round(W, 4)
sidorenko_ratio(H, W)
print("\nRow sums:", np.round(W.sum(axis=1), 8))
print("Col sums:", np.round(W.sum(axis=0), 8))
#Early stopping: max|W - 1| < 0.0167

#Search complete. Best Sidorenko ratio: -1.3123e-08
#AMCS_graphon(H, best_W, max_depth= 6, max_level= 8, max_steps = 10, epsilon = 0.3)
#Total elapsed time: 5806.97 seconds
```

Optimization results from previous versions of AMCS, stretched/ shrunk to the same scale to compare their ratios

```{python}
W = np.array([
  [9.829822690147628217e-01,1.006239824946722372e+00,9.892987303600105919e-01,1.021524806997454071e+00],
[1.006239824946722372e+00,9.759788132675752959e-01,1.014080386099867059e+00,1.003746041432600267e+00],
[9.892987303600105919e-01,1.014080386099867059e+00,1.018932138361181794e+00,9.777298907830966890e-01],
[1.021524806997454071e+00,1.003746041432600267e+00,9.777298907830966890e-01,9.968674181169788762e-01]
])
sidorenko_ratio(H, stretch(W, 1 / (60 * np.max(abs(W - 1)))))

W = np.array([
[1.008086217686960051e+00,1.006769525428973910e+00,9.915366153722398046e-01,9.936051460927676215e-01],
[1.006769525428973910e+00,9.812253243159484439e-01,1.006088680845625305e+00,1.005917335263637247e+00],
[9.915366153722398046e-01,1.006088680845625305e+00,1.001166744147237608e+00,1.001212472498347328e+00],
[9.936051460927676215e-01,1.005917335263637247e+00,1.001212472498347328e+00,9.992621628466726857e-01]
])
sidorenko_ratio(H, stretch(W, 1 / (60 * np.max(abs(W - 1)))))

W = np.array([
 [9.602514917187326970e-01,1.015286782632627061e+00,1.011833006234631238e+00,1.012574322152577366e+00],
[1.015286782632627061e+00,1.003895567311315684e+00,9.741647409692193449e-01,1.006689663022229508e+00],
[1.011833006234631238e+00,9.741647409692193449e-01,1.012872268312449586e+00,1.001127594711219260e+00],
[1.012574322152577366e+00,1.006689663022229508e+00,1.001127594711219260e+00,9.796284532124968081e-01]
])
sidorenko_ratio(H, stretch(W, 1 / (60 * np.max(abs(W - 1)))))
```

```{python}
W = np.array([
  [9.746938100681739048e-01,1.011048495783134049e+00,1.007385985375905069e+00,1.006898802943898552e+00],
[1.011048495783134049e+00,9.778949562160562659e-01,1.004556144263334838e+00,1.006470554227467895e+00],
[1.007385985375905069e+00,1.004556144263334838e+00,9.796630669374898348e-01,1.008385183820106779e+00],
[1.006898802943898552e+00,1.006470554227467895e+00,1.008385183820106779e+00,9.782578339505850762e-01]
])
sidorenko_ratio(H, stretch(W, 1 / (60 * np.max(abs(W - 1)))))
print("\nRow sums:", np.round(W.sum(axis=1), 8))
print("Col sums:", np.round(W.sum(axis=0), 8))

W = np.array([
  [9.785204923248900233e-01,1.006063664598876972e+00,1.008272758742907005e+00,1.007169217624657831e+00],
[1.006063664598876972e+00,9.809639196219169799e-01,1.006829849932037835e+00,1.006152334412331317e+00],
[1.008272758742907005e+00,1.006829849932037835e+00,9.769347070419951429e-01,1.007911030016080955e+00],
[1.007169217624657831e+00,1.006152334412331317e+00,1.007911030016080955e+00,9.787831703574124687e-01]
])
sidorenko_ratio(H, stretch(W, 1 / (60 * np.max(abs(W - 1)))))
print("\nRow sums:", np.round(W.sum(axis=1), 8))
print("Col sums:", np.round(W.sum(axis=0), 8))

W = np.array([
  [1.029190107276600541e+00,9.915724844106691416e-01,9.892356910190851504e-01,9.900125185850182641e-01],
[9.915724844106691416e-01,1.017155698960063637e+00,9.930494485333212218e-01,9.982377556065161750e-01],
[9.892356910190851504e-01,9.930494485333212218e-01,1.024217735972285714e+00,9.934713518665881926e-01],
[9.900125185850182641e-01,9.982377556065161750e-01,9.934713518665881926e-01,1.018277957748653817e+00]
])
print("\nRow sums:", np.round(W.sum(axis=1), 8))
print("Col sums:", np.round(W.sum(axis=0), 8))
sidorenko_ratio(H, stretch(W, 1 / (60 * np.max(abs(W - 1)))))
```

Local minimizers, other H to try, expand graph H

Robert: EFX code

Kevin: Memory out of bounds, filtering DP out of zero. Fixed the DP

Kate: Second neighborhood

Iurii: Penalty for 100 times for the normal one, second neighborhood 3 sinks in cycle. Look at what to generate

(Change it to delete edges and add edges somewhere else, look at large sparse graph)

# Yasir: 3\*4 on 6\*6, fix entries and don't do it randomly, making it fixed graph at the beginning. Keep checking on the random sample idea, see when it has positive densities, apply to sidorenko

AMCS for matrix version: log(LHS / RHS)

Comments:

1.  For second neighborhood conjecture's AMCS, Iurii's graph building strategy may need some adjustment to use that the second neighborhood conjecture has been proven to be true for any oriented graph that contains at least one vertex of out-degree ≤ 6, and random tournaments/ random directed graphs have many Seymour vertices with high probability.

2.  Kevin's CountHom does increase speed of counting homomorphisms for G with around 15 vertices by around 100 times compared to backtrack, I attempted a Monte Carlo search for the finite graph case of Sidorenko's conjecture, but currently the graph building game always converges to the complete graph when the amount of vertices is fixed.

3.  I implemented AMCS for the matrix version provided by Professor Wei, it doesn't require symmetry and can converge for 4x4 much quicker (more than 10 times faster) and is scalable to 8x8 matrices. Possible tendency to converge to structures with 4 extreme values on 4 different row/columns?

4.  I also attempted AMCS for EFX, it only works for 4 agents and 6 items due to speed.

Champ graph envy: smallest subset of B's bundle that A envies.

Thomas: smaller number of nodes, closer distributed computing Come up with RL strategy for weighted matrix Try reward function (ratio - 1)\^3 Yasir: LLM RL Kevin: n = 10 sample with all possible edge counts , try RL and counthom algorithm with weighted case Robert: Minmax is not necessarily EFX

```{python}
W = np.array([
[1.011608449121323972e+00,9.891825304526488116e-01,9.872346394532595104e-01,1.034909907127456785e+00,1.018469263228698907e+00,9.747775257968384066e-01,9.838264530439547739e-01],
[1.016161047029785713e+00,9.602643477079099155e-01,9.864416543991820774e-01,1.000034359509664350e+00,9.867465259022698554e-01,1.030934922307649382e+00,1.019420872559029911e+00],
[9.881003647290227399e-01,1.005366212287308381e+00,1.008803877644332214e+00,9.828693775381349695e-01,1.022727126475509563e+00,1.030312237404100273e+00,9.617736184414986678e-01],
[9.949467462533173601e-01,9.960072834913044071e-01,1.048311703355971236e+00,1.011703119814143292e+00,9.679125487572185493e-01,9.880015427418245011e-01,9.931232883279429435e-01],
[9.505410495090286238e-01,1.016714549917480781e+00,9.884559035812212624e-01,1.011022212132007159e+00,1.005835097603216211e+00,1.000373593078675460e+00,1.027034745721290943e+00],
[1.024857305491031489e+00,1.041553458902944707e+00,9.744585688848528271e-01,9.917960296709245060e-01,9.696222960239109234e-01,1.002132510703301005e+00,9.955368024339357191e-01],
[1.013741721215937197e+00,9.908935352219847559e-01,1.006276958811419764e+00,9.676144445305865371e-01,1.028701843504513880e+00,9.735224686152208484e-01,1.019343359545220373e+00]
])
print("\nRow sums:", np.round(W.sum(axis=1), 8))
print("Col sums:", np.round(W.sum(axis=0), 8))
#Search complete. Best ratio: -2.1565e-07
#Total elapsed time: 10954.29 seconds
#AMCS_graphon(H, best_W, max_depth= 20, max_level= 10, max_steps = 10, epsilon = 0.3)
#min_length = 0.0001
print(f"log(RHS / LHS) = {sidorenko_eigenvalue_check(W):.4e}")

W = np.array([
[1.005210613430479238e+00,9.785080600008525531e-01,1.030149118534539721e+00,9.470065778919203314e-01,9.874810917734455629e-01,1.019551560619056163e+00,1.065469241950302015e+00,9.665218246105804489e-01],
[9.576296863816700089e-01,1.019208953870945233e+00,1.045248971905472946e+00,1.022662155815650120e+00,9.461606078133160125e-01,1.029002415024977024e+00,9.825217135572851257e-01,9.976211271243448087e-01],
[9.764775764889866982e-01,9.458132887031365232e-01,9.719115937133030458e-01,1.022463352333309539e+00,1.018376128267916458e+00,1.036782515234569546e+00,1.002151930428455406e+00,1.025899794260537012e+00],
[1.006713557276289528e+00,1.008307042104213069e+00,1.040946528161804663e+00,1.008664966228262294e+00,1.019888284606024431e+00,9.232291698224220911e-01,9.946652951496551820e-01,9.975824334050904518e-01],
[9.589669305842136726e-01,1.023313954237424550e+00,9.973191407360714189e-01,9.605969024469170892e-01,1.055875610975388623e+00,9.970720316926456883e-01,9.804426707940819830e-01,1.026401611463798380e+00],
[1.005497669496447255e+00,1.041965869323389082e+00,9.550340639720691360e-01,1.031173009640337090e+00,1.015519623225898060e+00,1.012182333019336244e+00,1.003764230214520881e+00,9.348395964632761901e-01],
[1.083433096335276735e+00,9.782418489686776075e-01,9.957253383740944930e-01,9.809332560256764921e-01,9.997749239282307521e-01,1.011633199095348878e+00,9.485159684895011489e-01,1.001760102199549252e+00],
[1.006264108128872570e+00,1.004615642358778205e+00,9.636318637294639666e-01,1.026617284450815459e+00,9.569245090018794198e-01,9.704001628575262828e-01,1.022401342674246871e+00,1.049334928607437600e+00]
])
print("\nRow sums:", np.round(W.sum(axis=1), 8))
print("Col sums:", np.round(W.sum(axis=0), 8))
#Search complete. Best Sidorenko ratio: -9.5487e-07
#Total elapsed time: 7369.60 seconds
#AMCS_graphon(H, best_W, max_depth= 20, max_level= 10, max_steps = 10, epsilon = 0.3)
#min_length = 0.0001
print(f"log(RHS / LHS) = {sidorenko_eigenvalue_check(W):.4e}")

W = np.array([
[1.007506967405353393e+00,1.004106912614356473e+00,1.010723768125682209e+00,9.776656383596850075e-01],
[1.012664396870649464e+00,9.784144224017374825e-01,9.987501454918620292e-01,1.010167532307195692e+00],
[9.776232117805619959e-01,1.002646120513427608e+00,1.012408805841642723e+00,1.007322005117393893e+00],
[1.002207255686432541e+00,1.014843899567875685e+00,9.781104730983603002e-01,1.004838444817784948e+00]
])
np.round(W, 3)
print(f"log(RHS / LHS) = {sidorenko_eigenvalue_check(W):.4e}")
print("\nRow sums:", np.round(W.sum(axis=1), 8))
print("Col sums:", np.round(W.sum(axis=0), 8))
#AMCS_graphon(H, best_W, max_depth= 30, max_level= 6, max_steps = 10, epsilon = cur_ep)
#min_length = 0.0001
#Search complete. Best Sidorenko ratio: -5.3620e-08
#Total elapsed time: 345.37 seconds

W = np.array([
[1.022544834903217570e+00,9.882808449694164832e-01,9.980743087708238148e-01,9.911096412234395858e-01],
[9.897054112579033447e-01,1.000636987894977903e+00,9.851475614048055274e-01,1.024501242676079782e+00],
[9.903961333865767269e-01,9.877938668725897431e-01,1.022352820449602184e+00,9.994461262333801388e-01],
[9.973566180616084687e-01,1.023287326145273290e+00,9.944129254417017894e-01,9.849533503086042030e-01]
])
print("\nRow sums:", np.round(W.sum(axis=1), 8))
print("Col sums:", np.round(W.sum(axis=0), 8))


```

6.30:

Kevin's library speeds up the graphon search by a few times.

RL struggles because the dimension of variates is too high, simpler strategies like multi-armed bandit did converge when I reduced the complexity. Reward function and adaptive epsilon affect convergence speed, but the results haven't changed much.

Note: All optimizated matrices (including symmetric graphons) first converge towards a normalized doubly stochastic matrix (all rows and columns have the same sum) and then converge towards uniform, not sure if this pattern holds any significance.

The conjecture is equivalent to $\lambda_1^5 + \lambda_2^5... \lambda_n^5 \geq n^{10}$ . The optimization appears to allow the largest eigenvalue to get closest to $n^2$ , but this can't directly lead to a counterexample since ranking the eigenvalues in descending order, there is $\lambda_1 \geq n^2$ (proved) and empirically $\lambda_2 + \lambda_n \geq 0$ , $\lambda_3 + \lambda_{n-1} \geq 0$ ... (No counterexample found yet) Next step could be exploring structure of the eigenvalues.
