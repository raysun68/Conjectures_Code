---
title: "Sidorenko_Graphon"
format: pdf
author: "Raymond Sun"
date: "20250606"
editor: visual
---



## Helper Functions



```{python}
import numpy as np
import itertools
def count_homomorphisms_backtrack(H_adj, G_adj):
    h = H_adj.shape[0]
    g = G_adj.shape[0]
    count = 0

    mapping = [-1] * h

    def backtrack(pos):
        nonlocal count
        if pos == h:
            count += 1
            return

        for candidate in range(g):
            # Check edges from pos to previously mapped vertices
            valid = True
            for prev in range(pos):
                if H_adj[pos, prev] == 1 and G_adj[candidate, mapping[prev]] != 1:
                    valid = False
                    break
                if H_adj[prev, pos] == 1 and G_adj[mapping[prev], candidate] != 1:
                    valid = False
                    break
            if valid:
                mapping[pos] = candidate
                backtrack(pos + 1)
                mapping[pos] = -1

    backtrack(0)
    return count

def compute_t_H_G_backtrack(H_adj, G_adj):
    g = G_adj.shape[0]
    total_maps = g ** H_adj.shape[0]
    hom_count = count_homomorphisms_backtrack(H_adj, G_adj)
    return hom_count / total_maps

def average_degree(G_adj):
    n = G_adj.shape[0]
    total_degree = np.sum(G_adj)
    return total_degree / (n ** 2)

def compute_t_G_W(H, W_block):
    # Compute t for nxn graphon, brute force n^|V(H)| calculations
    n = H.shape[0]
    edges = [(i, j) for i in range(n) for j in range(i + 1, n) if H[i, j] == 1 or H[j, i] == 1]
    num_blocks = W_block.shape[0]
    block_volume = 1.0 / num_blocks
    t = 0.0
    for assignment in product(range(num_blocks), repeat=n):
        prob = 1.0
        for (u, v) in edges:
            prob *= W_block[assignment[u], assignment[v]]
        t += prob * (block_volume ** n)
    return t

def sidorenko_gap(H, W_block):
    # Compute p^|E(H)| - t
    t = compute_t_G_W(H, W_block)
    p = np.mean(W_block)
    num_edges = int(np.sum(H) // 2)
    return p**num_edges - t, t, p**num_edges

def sidorenko_ratio(H, W_block):
    # Computes p^|E(H)| / t - 1
    t = compute_t_G_W(H, W_block)
    p = np.mean(W_block)
    num_edges = int(np.sum(H) // 2)
    return (p ** num_edges / t - 1), t, p**num_edges
def perturb(W):
    W_new = W.copy()
    n = W.shape[0]

    # Randomly choose any (i, j) pair (including diagonals)
    i = random.randint(0, n - 1)
    j = random.randint(0, n - 1)

    # Generate a small random perturbation
    delta = random.uniform(-0.01, 0.01)
    new_val = W_new[i, j] + delta

    # Apply constraints
    if i == j:
        # For diagonal, clamp to [0, 0.1]
        new_val = min(max(new_val, 0.0), 0.8)
    else:
        # For off-diagonal, clamp to [0, 1.0]
        if not (0.0 <= new_val <= 1.0):
            return W  # Reject and return original

    W_new[i, j] = new_val
    return W_new 
```



## Backtrack Homomorphism Counter Demo



```{python}
H = np.array([
    [0,0,0,0,0,0,0,1,1,1],  
    [0,0,0,0,0,1,0,0,1,1],  
    [0,0,0,0,0,1,1,0,0,1],  
    [0,0,0,0,0,1,1,1,0,0],  
    [0,0,0,0,0,0,1,1,1,0],  
    [0,1,1,1,0,0,0,0,0,0],  
    [0,0,1,1,1,0,0,0,0,0],  
    [1,0,0,1,1,0,0,0,0,0],  
    [1,1,0,0,1,0,0,0,0,0],  
    [1,1,1,0,0,0,0,0,0,0]
])
G = np.array([
    [0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0],
    [1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1],
    [1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1],
    [0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0],
    [1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1],
    [0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0],
    [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0],
    [0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1],
    [1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0],
    [1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1],
    [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0],
    [0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0]
])

G1 = np.array([
  [0, 1],
  [1, 0]
  ])

G2 = np.array([
  [0, 1, 1, 1, 1, 1],
  [1, 0, 1, 0, 1, 1],
  [1, 1, 0, 1, 1, 1],
  [1, 0, 1, 0, 1, 1],
  [1, 1, 1, 1, 0, 1],
  [1, 1, 1, 1, 1, 0],
])
#print("Number of homomorphisms:",
#compute_t_H_G(H, G_adj)
count_homomorphisms_backtrack(H, G1)
count_homomorphisms_backtrack(H, G2)
gap = sidorenko_ratio(H, G2)
print("p^|E(H)| / t(H, G) - 1 =", gap)
count_homomorphisms_backtrack(H, G)
```



## 4x4 Graphon Optimization Demo

Fixed p and Sidorenko gap as reward function, randomly pick one weight to increase by 0.005 and one to decrease by 0.005 every action:



```{python}
from itertools import product
import random
# ---- Define the graph G ----
H = np.array([
    [0,0,0,0,0,0,0,1,1,1],  
    [0,0,0,0,0,1,0,0,1,1],  
    [0,0,0,0,0,1,1,0,0,1],  
    [0,0,0,0,0,1,1,1,0,0],  
    [0,0,0,0,0,0,1,1,1,0],  
    [0,1,1,1,0,0,0,0,0,0],  
    [0,0,1,1,1,0,0,0,0,0],  
    [1,0,0,1,1,0,0,0,0,0],  
    [1,1,0,0,1,0,0,0,0,0],  
    [1,1,1,0,0,0,0,0,0,0]
])
  # W with average p = 0.80
W = np.array([
 [0.78, 0.86, 0.69, 0.87],
 [0.91, 0.81, 0.6, 0.88],
 [0.8, 0.68, 0.96, 0.76],
 [0.71, 0.85, 0.95, 0.69]
])
sidorenko_gap(H, W)
```

```{python}
# --- Optimization loop
best_gap, best_t, best_p_e = sidorenko_gap(H, W)
W_best = W.copy()  # initialize best

for step in range(100): # Custom amount of iterations
    W_new = perturb(W)
    new_gap, new_t, new_p_e = sidorenko_gap(H, W_new)
    delta = abs(new_gap) - abs(best_gap)

    if delta < 0:
        W = W_new  # <-- update W!
        if abs(new_gap) < abs(best_gap):
            W_best = W.copy()
            best_gap, best_t, best_p_e = new_gap, new_t, new_p_e

# --- Final output
print("\nFinal optimized W:")
print(np.round(W_best, 3))  # <-- use W_best
print(f"Final Sidorenko gap: {best_gap:.3e}")
```



Example: Start from 4x4 graphon with weight average p = 0.5:



```{python}
W = np.array([
 [0.89, 0.49, 0.35, 0.5],
 [0.31, 0.78, 0.2, 0.59],
 [0.39, 0.71, 0.51, 0.2],
 [0.11, 0.87, 0.39, 0.68],
])
sidorenko_gap(H, W)
```



After running loop for many iterations, approaches uniform weights and stabilizes here:



```{python}
def compute_t_G_W_incremental(H, W_block, prev_probs=None, changed_index=None):
    n = H.shape[0]
    edges = [(u, v) for u in range(n) for v in range(u + 1, n) if H[u, v] == 1 or H[v, u] == 1]
    k = W_block.shape[0]
    block_volume = 1.0 / k
    updated_probs = {}
    total = 0.0

    if prev_probs is None or changed_index is None:
        for assignment in product(range(k), repeat=n):
            prob = 1.0
            for u, v in edges:
                prob *= W_block[assignment[u], assignment[v]]
            updated_probs[assignment] = prob
            total += prob
        return total * (block_volume ** n), updated_probs

    ci, cj = changed_index
    for assignment, prev_prob in prev_probs.items():
        affected = any(
            (assignment[u], assignment[v]) == changed_index or
            (assignment[v], assignment[u]) == changed_index
            for u, v in edges
        )
        if affected:
            prob = 1.0
            for u, v in edges:
                prob *= W_block[assignment[u], assignment[v]]
            updated_probs[assignment] = prob
        else:
            updated_probs[assignment] = prev_prob
        total += updated_probs[assignment]

    return total * (block_volume ** n), updated_probs


def sidorenko_ratio(H, W_block, prev_probs=None, changed_index=None):
    t, updated_probs = compute_t_G_W_incremental(H, W_block, prev_probs, changed_index)
    p = np.mean(W_block)
    num_edges = int(np.sum(H) // 2)
    ratio = p ** num_edges / t - 1
    return ratio, t, p ** num_edges, updated_probs


def optimize_weights(H, W_init, sidorenko_ratio_fn, step=0.005, max_calls=500):
    W = W_init.copy()
    n = W.shape[0]
    flat_indices = [(i, j) for i in range(n) for j in range(n)]
    calls = 0
    no_change_round = 0

    current_ratio, _, _, prev_probs = sidorenko_ratio_fn(H, W)
    calls += 1

    pattern_updates = []
    applying_pattern = False

    while calls < max_calls and no_change_round < 2:
        updated = False

        if applying_pattern:
            W_trial = W.copy()
            for (i, j, direction) in pattern_updates:
                if direction == "+":
                    W_trial[i, j] = min(W[i, j] + step, 1.0)
                else:
                    W_trial[i, j] = max(W[i, j] - step, 0.0)
            new_ratio, _, _, new_probs = sidorenko_ratio_fn(H, W_trial)
            calls += 1
            if new_ratio > current_ratio:
                W = W_trial
                current_ratio = new_ratio
                prev_probs = new_probs
                updated = True
                print("Applied recorded pattern step")
            else:
                applying_pattern = False
        else:
            pattern_updates = []
            for (i, j) in flat_indices:
                improved = False

                # Try increasing
                while calls < max_calls:
                    W_trial = W.copy()
                    W_trial[i, j] = min(W[i, j] + step, 1.0)
                    new_ratio, _, _, new_probs = sidorenko_ratio_fn(H, W_trial, prev_probs, (i, j))
                    calls += 1
                    if new_ratio > current_ratio:
                        W = W_trial
                        current_ratio = new_ratio
                        prev_probs = new_probs
                        improved = True
                        pattern_updates.append((i, j, "+"))
                        print(f"Improved at ({i}, {j}) +")
                    else:
                        break

                # Try decreasing
                if not improved:
                    while calls < max_calls:
                        W_trial = W.copy()
                        W_trial[i, j] = max(W[i, j] - step, 0.0)
                        new_ratio, _, _, new_probs = sidorenko_ratio_fn(H, W_trial, prev_probs, (i, j))
                        calls += 1
                        if new_ratio > current_ratio:
                            W = W_trial
                            current_ratio = new_ratio
                            prev_probs = new_probs
                            improved = True
                            pattern_updates.append((i, j, "-"))
                            print(f"Improved at ({i}, {j}) -")
                        else:
                            break

                if improved:
                    updated = True

            if pattern_updates:
                applying_pattern = True

        if not updated:
            no_change_round += 1
        else:
            no_change_round = 0

    return W, current_ratio

W_best = W_optimized
W_optimized, final_ratio = optimize_weights(H, W_best, sidorenko_ratio)
print(W_optimized)
print("Final score:", final_ratio)
```

```{python}
W = np.array([[0.26856 0.2939  0.28798 0.27146]
 [0.27418 0.26512 0.30262 0.27992]
 [0.29404 0.29372 0.26142 0.27272]
 [0.28508 0.26912 0.26978 0.29778]])
sidorenko_ratio(H, W)
np.mean(W_best)
best_gap, best_t, best_p_e = sidorenko_ratio(H, W)
W_best = W.copy()  # initialize best
for step in range(200):
    W_new = perturb(W)
    new_gap, new_t, new_p_e = sidorenko_ratio(H, W_new)
    delta = abs(new_gap) - abs(best_gap)

    if delta < 0:
        W = W_new  # <-- update W!
        if abs(new_gap) < abs(best_gap):
            W_best = W.copy()
            best_gap, best_t, best_p_e = new_gap, new_t, new_p_e

# --- Final output
print("\nFinal optimized W:")
print(np.round(W_best, 3))  # <-- use W_best
print(f"Final Sidorenko ratio: {best_gap:.3e}")
```



Thoughts:

1.  Changing only two weights would still affect 74% of the mappings in 4\*4 case, so just storing the last value of t and updating doesn't save much time. It saves over 50% of time for 5\*5 graphons, although 5^10^ is almost 10 times the value of 4^10^
2.  For H with 10 vertices and 4\*4 graphon, the iterations already take a lot of time, and is exponential so approximate methods would be needed to explore cases like C4xC4 and 6\*6 graphons.
3.  In 4x4 case, weights approach the uniform case where Sidorenko gap = 0 as expected with the current random update strategy with fixed p, but maybe some better RL techniques could help find escape local maxima to find weight distributions that potentially cross 0.
4.  Backtrack algorithm seems to give accurate numbers and is many times faster than brute force, but it is slower compared to Sagemath so it would be helpful if we could find how to make Sagemath algorithm work for \|V(H)\| \> 8.



```{r}
# Define W matrix (4x4)
options(digits = 15)
W <- matrix(c(
  0.7570616031,  0.7573413916,  0.7571729541,  0.75715156973,
  0.75721313223, 0.7570527416,  0.7571680666,  0.757293579102,
  0.75718404785, 0.7571754541,  0.75708881348, 0.7572792041,
  0.75726873535, 0.75715793223, 0.75729740723, 0.7570032666
), nrow = 4, byrow = TRUE)

H <- matrix(c(
  0,0,0,0,0,0,0,1,1,1,  
  0,0,0,0,0,1,0,0,1,1,  
  0,0,0,0,0,1,1,0,0,1,  
  0,0,0,0,0,1,1,1,0,0,  
  0,0,0,0,0,0,1,1,1,0,  
  0,1,1,1,0,0,0,0,0,0,  
  0,0,1,1,1,0,0,0,0,0,  
  1,0,0,1,1,0,0,0,0,0,  
  1,1,0,0,1,0,0,0,0,0,  
  1,1,1,0,0,0,0,0,0,0
), nrow = 10, byrow = TRUE)

log_sum_exp <- function(log_probs) {
  max_log <- max(log_probs)
  max_log + log(sum(exp(log_probs - max_log)))
}


# Compute t(H, W) in log-space
compute_t_H_W_log <- function(H, W) {
  n_H <- nrow(H)
  n_W <- nrow(W)
  block_volume_log <- -log(n_W)
  assignments <- expand.grid(rep(list(1:n_W), n_H))
  edges <- which(upper.tri(H) & H == 1, arr.ind = TRUE)
  
  log_terms <- numeric(nrow(assignments))
  for (i in 1:nrow(assignments)) {
    a <- as.integer(assignments[i, ])
    log_prob <- 0
    for (k in 1:nrow(edges)) {
      u <- edges[k, 1]
      v <- edges[k, 2]
      log_prob <- log_prob + log(W[a[u], a[v]])
    }
    log_terms[i] <- log_prob
  }
  
  log_t <- log_sum_exp(log_terms) + n_H * block_volume_log
  return(exp(log_t))
}

# Numerically stable log(a + b) using log(a) and log(b)
logspace_add <- function(log_a, log_b) {
  if (is.infinite(log_a)) return(log_b)
  if (is.infinite(log_b)) return(log_a)
  max_log <- max(log_a, log_b)
  return(max_log + log1p(exp(-abs(log_a - log_b))))
}

# Sidorenko ratio
sidorenko_ratio_log <- function(H, W) {
  t <- compute_t_H_W_log(H, W)
  p <- mean(W)
  m <- sum(H) / 2
  expected <- p ^ m
  ratio <- expected / t - 1
  return(list(ratio = ratio, t = t, expected = expected))
}

# Run
result <- sidorenko_ratio_log(H, W)
print(result)


```

