View(doc)
import pymupdf
import fitz
import sys
import json
doc = fitz.open('paper1.pdf')
for page in doc:
text = page.get_text()
print(text)
View(text)
import pymupdf
import fitz
import sys
import json
doc = fitz.open('paper1.pdf')
text = ""
for page in doc:
text+=page.get_text()
View(text)
View(text)
text = [page.get_text() for page in doc]
View(text)
text[0]
text[2]
text[5]
text[6]
text[6]
text[8]
text[6]
import pymupdf
import fitz
import sys
import json
doc = fitz.open('paper1.pdf')
text = [page.get_text() for page in doc]
text[6]
pages_with_placebo = []
# Loop through each page in the document
for page_num in range(len(doc)):
page = doc.load_page(page_num)  # Load the page
text = page.get_text()  # Extract text from the page
# Check if the string 'placebo' is in the text (case-insensitive search)
if "placebo" in text.lower():
pages_with_placebo.append(page_num + 1)  # Store the page number (1-indexed)
return pages_with_placebo
import pymupdf
import fitz
import sys
import json
doc = fitz.open('paper1.pdf')
text = [page.get_text() for page in doc]
text[6]
pages_with_placebo = []
for page_num in range(len(doc)):
page = doc.load_page(page_num)  # Load the page
text = page.get_text()  # Extract text from the page
# Check if the string 'placebo' is in the text (case-insensitive search)
if "placebo" in text.lower():
pages_with_placebo.append(page_num + 1)  # Store the page number (1-indexed)
pages_with_placebo
import pymupdf
import fitz
import sys
import json
doc = fitz.open('paper1.pdf')
text = [page.get_text() for page in doc]
text[6]
pages_with_placebo = []
for page_num in range(len(doc)):
page = doc.load_page(page_num)  # Load the page
text = page.get_text()  # Extract text from the page
# Check if the string 'placebo' is in the text (case-insensitive search)
if "adverse" in text.lower():
pages_with_placebo.append(page_num + 1)  # Store the page number (1-indexed)
pages_with_placebo
import pymupdf
import fitz
import sys
import json
doc = fitz.open('paper1.pdf')
text = [page.get_text() for page in doc]
text[6]
pages_with_placebo = []
for page_num in range(len(doc)):
page = doc.load_page(page_num)  # Load the page
text = page.get_text()  # Extract text from the page
# Check if the string 'placebo' is in the text (case-insensitive search)
if "suspected" in text.lower():
pages_with_placebo.append(page_num + 1)  # Store the page number (1-indexed)
pages_with_placebo
import pymupdf
import fitz
import sys
import json
doc = fitz.open('paper1.pdf')
text = [page.get_text() for page in doc]
text[6]
pages_with_placebo = []
for page_num in range(len(doc)):
page = doc.load_page(page_num)  # Load the page
text = page.get_text()  # Extract text from the page
# Check if the string 'placebo' is in the text (case-insensitive search)
if "confirmed" in text.lower():
pages_with_placebo.append(page_num + 1)  # Store the page number (1-indexed)
pages_with_placebo
import pymupdf
import fitz
import sys
import json
doc = fitz.open('paper1.pdf')
text = [page.get_text() for page in doc]
text[6]
pages_with_placebo = []
for page_num in range(len(doc)):
page = doc.load_page(page_num)  # Load the page
text = page.get_text()  # Extract text from the page
# Check if the string 'placebo' is in the text (case-insensitive search)
if "covid" in text.lower():
pages_with_placebo.append(page_num + 1)  # Store the page number (1-indexed)
pages_with_placebo
import pymupdf
import fitz
import sys
import json
doc = fitz.open('paper1.pdf')
text = [page.get_text() for page in doc]
text[6]
pages_with_placebo = []
for page_num in range(len(doc)):
page = doc.load_page(page_num)  # Load the page
text = page.get_text()  # Extract text from the page
# Check if the string 'placebo' is in the text (case-insensitive search)
if "rct" in text.lower():
pages_with_placebo.append(page_num + 1)  # Store the page number (1-indexed)
pages_with_placebo
import pymupdf
import fitz
import sys
import json
doc = fitz.open('paper1.pdf')
text = [page.get_text() for page in doc]
text[6]
pages_with_placebo = []
for page_num in range(len(doc)):
page = doc.load_page(page_num)  # Load the page
text = page.get_text()  # Extract text from the page
# Check if the string 'placebo' is in the text (case-insensitive search)
if "confidence interval" in text.lower():
pages_with_placebo.append(page_num + 1)  # Store the page number (1-indexed)
pages_with_placebo
import pymupdf
import fitz
import sys
import json
doc = fitz.open('paper1.pdf')
text = [page.get_text() for page in doc]
text[6]
pages_with_placebo = []
for page_num in range(len(doc)):
page = doc.load_page(page_num)  # Load the page
text = page.get_text()  # Extract text from the page
# Check if the string 'placebo' is in the text (case-insensitive search)
if "groups" in text.lower():
pages_with_placebo.append(page_num + 1)  # Store the page number (1-indexed)
pages_with_placebo
import pymupdf
import fitz
import sys
import json
doc = fitz.open('paper2.pdf')
text = [page.get_text() for page in doc]
text[6]
pages_with_placebo = []
for page_num in range(len(doc)):
page = doc.load_page(page_num)  # Load the page
text = page.get_text()  # Extract text from the page
# Check if the string 'placebo' is in the text (case-insensitive search)
if "placebo" in text.lower():
pages_with_placebo.append(page_num + 1)  # Store the page number (1-indexed)
pages_with_placebo
import pymupdf
import fitz
import sys
import json
doc = fitz.open('paper3.pdf')
text = [page.get_text() for page in doc]
text[6]
pages_with_placebo = []
for page_num in range(len(doc)):
page = doc.load_page(page_num)  # Load the page
text = page.get_text()  # Extract text from the page
# Check if the string 'placebo' is in the text (case-insensitive search)
if "placebo" in text.lower():
pages_with_placebo.append(page_num + 1)  # Store the page number (1-indexed)
pages_with_placebo
import pymupdf
import fitz
import sys
import json
doc = fitz.open('paper3.pdf')
text = [page.get_text() for page in doc]
text[6]
pages_with_placebo = []
for page_num in range(len(doc)):
page = doc.load_page(page_num)  # Load the page
text = page.get_text()  # Extract text from the page
# Check if the string 'placebo' is in the text (case-insensitive search)
if "meta" in text.lower():
pages_with_placebo.append(page_num + 1)  # Store the page number (1-indexed)
pages_with_placebo
import pymupdf
import fitz
import sys
import json
doc = fitz.open('pape2.pdf')
text = [page.get_text() for page in doc]
text[6]
pages_with_placebo = []
for page_num in range(len(doc)):
page = doc.load_page(page_num)  # Load the page
text = page.get_text()  # Extract text from the page
# Check if the string 'placebo' is in the text (case-insensitive search)
if "meta" in text.lower():
pages_with_placebo.append(page_num + 1)  # Store the page number (1-indexed)
pages_with_placebo
import pymupdf
import fitz
import sys
import json
doc = fitz.open('paper2.pdf')
text = [page.get_text() for page in doc]
text[6]
pages_with_placebo = []
for page_num in range(len(doc)):
page = doc.load_page(page_num)  # Load the page
text = page.get_text()  # Extract text from the page
# Check if the string 'placebo' is in the text (case-insensitive search)
if "meta" in text.lower():
pages_with_placebo.append(page_num + 1)  # Store the page number (1-indexed)
pages_with_placebo
len(doc)
import pymupdf
import fitz
import sys
import json
doc = fitz.open('paper2.pdf')
text = [page.get_text() for page in doc]
include_keys = ["placebo", "protocol", "treatment"]
exclude_keys = ""
pages_with_placebo = []
for page_num in range(len(doc)):
page = doc.load_page(page_num)  # Load the page
text = page.get_text()  # Extract text from the page
# Check if the string 'placebo' is in the text (case-insensitive search)
if "review" in text.lower():
pages_with_placebo.append(page_num + 1)  # Store the page number (1-indexed)
pages_with_placebo
import pymupdf
import fitz
import sys
import json
doc = fitz.open('paper2.pdf')
text = [page.get_text() for page in doc]
include_keys = ["placebo", "randomized", "treatment"]
exclude_keys = ["protocol", "meta"]
pages_with_placebo = []
for page_num in range(len(doc)):
page = doc.load_page(page_num)  # Load the page
text = page.get_text()  # Extract text from the page
# Check if the string 'placebo' is in the text (case-insensitive search)
if "pcr" in text.lower():
pages_with_placebo.append(page_num + 1)  # Store the page number (1-indexed)
pages_with_placebo
import pymupdf
import fitz
import sys
import json
doc = fitz.open('paper1.pdf')
text = [page.get_text() for page in doc]
include_keys = ["placebo", "randomized", "treatment"]
exclude_keys = ["protocol", "meta"]
pages_with_placebo = []
for page_num in range(len(doc)):
page = doc.load_page(page_num)  # Load the page
text = page.get_text()  # Extract text from the page
# Check if the string 'placebo' is in the text (case-insensitive search)
if "pcr" in text.lower():
pages_with_placebo.append(page_num + 1)  # Store the page number (1-indexed)
pages_with_placebo
import pymupdf
import fitz
import sys
import json
doc = fitz.open('paper3.pdf')
text = [page.get_text() for page in doc]
include_keys = ["placebo", "randomized", "treatment"]
exclude_keys = ["protocol", "meta"]
pages_with_placebo = []
for page_num in range(len(doc)):
page = doc.load_page(page_num)  # Load the page
text = page.get_text()  # Extract text from the page
# Check if the string 'placebo' is in the text (case-insensitive search)
if "pcr" in text.lower():
pages_with_placebo.append(page_num + 1)  # Store the page number (1-indexed)
pages_with_placebo
import pymupdf
import fitz
import sys
import json
doc = fitz.open('paper3.pdf')
text = [page.get_text() for page in doc]
include_keys = ["placebo", "randomized", "pcr"]
exclude_keys = ["protocol", "meta-analysis", ""]
pages_with_placebo = []
for page_num in range(len(doc)):
page = doc.load_page(page_num)  # Load the page
text = page.get_text()  # Extract text from the page
# Check if the string 'placebo' is in the text (case-insensitive search)
if "post-exposure" in text.lower():
pages_with_placebo.append(page_num + 1)  # Store the page number (1-indexed)
pages_with_placebo
import pymupdf
import fitz
import sys
import json
doc = fitz.open('paper2.pdf')
text = [page.get_text() for page in doc]
include_keys = ["placebo", "randomized", "pcr"]
exclude_keys = ["protocol", "meta-analysis", ""]
pages_with_placebo = []
for page_num in range(len(doc)):
page = doc.load_page(page_num)  # Load the page
text = page.get_text()  # Extract text from the page
# Check if the string 'placebo' is in the text (case-insensitive search)
if "post-exposure" in text.lower():
pages_with_placebo.append(page_num + 1)  # Store the page number (1-indexed)
pages_with_placebo
import pymupdf
import fitz
import sys
import json
doc = fitz.open('paper1.pdf')
text = [page.get_text() for page in doc]
include_keys = ["placebo", "randomized", "pcr"]
exclude_keys = ["protocol", "meta-analysis", ""]
pages_with_placebo = []
for page_num in range(len(doc)):
page = doc.load_page(page_num)  # Load the page
text = page.get_text()  # Extract text from the page
# Check if the string 'placebo' is in the text (case-insensitive search)
if "post-exposure" in text.lower():
pages_with_placebo.append(page_num + 1)  # Store the page number (1-indexed)
pages_with_placebo
import pymupdf
import fitz
import sys
import json
doc = fitz.open('paper3.pdf')
text = [page.get_text() for page in doc]
include_keys = ["placebo", "randomized", "pcr"]
exclude_keys = ["protocol", "meta-analysis", ""]
pages_with_placebo = []
for page_num in range(len(doc)):
page = doc.load_page(page_num)  # Load the page
text = page.get_text()  # Extract text from the page
# Check if the string 'placebo' is in the text (case-insensitive search)
if "post-exposure" in text.lower():
pages_with_placebo.append(page_num + 1)  # Store the page number (1-indexed)
pages_with_placebo
import pymupdf
import fitz
import sys
import json
doc = fitz.open('paper3.pdf')
text = [page.get_text() for page in doc]
include_keys = ["placebo", "randomized", "pcr"]
exclude_keys = ["protocol", "meta-analysis", ""]
pages_with_placebo = []
for page_num in range(len(doc)):
page = doc.load_page(page_num)  # Load the page
text = page.get_text()  # Extract text from the page
# Check if the string 'placebo' is in the text (case-insensitive search)
if "postexposure" in text.lower():
pages_with_placebo.append(page_num + 1)  # Store the page number (1-indexed)
pages_with_placebo
import pymupdf
import fitz
import sys
import json
doc = fitz.open('paper3.pdf')
text = [page.get_text() for page in doc]
# Some keywords to include or exclude for the meta-analysis
include_keys = ["placebo", "randomized", "pcr"]
exclude_keys = ["protocol", "meta-analysis", "postexposure"]
pages_with_placebo = []
for page_num in range(len(doc)):
page = doc.load_page(page_num)  # Load the page
text = page.get_text()  # Extract text from the page
# Check if the string 'placebo' is in the text (case-insensitive search)
if "workers" in text.lower():
pages_with_placebo.append(page_num + 1)  # Store the page number (1-indexed)
pages_with_placebo
import pymupdf
import fitz
import sys
import json
doc = fitz.open('paper2.pdf')
text = [page.get_text() for page in doc]
# Some keywords to include or exclude for the meta-analysis
include_keys = ["placebo", "randomized", "pcr"]
exclude_keys = ["protocol", "meta-analysis", "postexposure"]
pages_with_placebo = []
for page_num in range(len(doc)):
page = doc.load_page(page_num)  # Load the page
text = page.get_text()  # Extract text from the page
# Check if the string 'placebo' is in the text (case-insensitive search)
if "workers" in text.lower():
pages_with_placebo.append(page_num + 1)  # Store the page number (1-indexed)
pages_with_placebo
import pymupdf
import fitz
import sys
import json
doc = fitz.open('paper1.pdf')
text = [page.get_text() for page in doc]
# Some keywords to include or exclude for the meta-analysis
include_keys = ["placebo", "randomized", "pcr"]
exclude_keys = ["protocol", "meta-analysis", "postexposure"]
pages_with_placebo = []
for page_num in range(len(doc)):
page = doc.load_page(page_num)  # Load the page
text = page.get_text()  # Extract text from the page
# Check if the string 'placebo' is in the text (case-insensitive search)
if "workers" in text.lower():
pages_with_placebo.append(page_num + 1)  # Store the page number (1-indexed)
pages_with_placebo
reticulate::repl_python()
from shiny import ui, render, reactive
from shiny import ui, render, reactive
reticulate::repl_python()
reticulate::repl_python()
use_python("/opt/homebrew/bin/python3.12")
library(reticulate)
use_python("/opt/homebrew/bin/python3.12")
library(reticulate)
# Specify the path to your Python version
use_python("/opt/homebrew/bin/python3.12", required = TRUE)
reticulate::repl_python()
reticulate::py_config()
reticulate::use_python("/path/to/python3.13")
which python3.13
python3 --version
reticulate::repl_python()
To demonstrate how this tool works, it is applied on an existing meta-analysis summarizing clinical trials of pre-exposure use of HCQ against infection of SARS-CoV-2 in HCWs. $^{[1]}$ We evaluate the performance of our tool using a test set of 30 papers that are chosen from studies picked from PubMed, which includes the 10 studies manually selected by researchers as well as some typical papers that are similar to those selected but are ineligible due to the criteria. By comparing the tool’s keyword-matching results and likelihood-based rankings against the expert selections, we assess its potential to assist in streamlining the paper review process. In future work, this tool could be further refined to support a broader range of meta-analysis objectives and research domains.
reticulate::repl_python()
reticulate::use_python("/usr/local/bin/python3.13")
reticulate::use_python("/usr/local/bin/python3.13")
reticulate::repl_python()
reticulate::source_python('~/project-meta-analysis-tool/shinyapp.py')
reticulate::source_python('~/project-meta-analysis-tool/shinyapp.py')
reticulate::repl_python()
reticulate::repl_python()
reticulate::source_python('~/project-meta-analysis-tool/shinyapp.py')
reticulate::repl_python()
reticulate::source_python('~/project-meta-analysis-tool/shinyapp.py')
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::source_python('~/count-graph-homs/standard_hom_count.py')
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
gc()
gc()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
gc()
gc()
reticulate::repl_python()
gc()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::source_python('~/Conjectures_Code/graphons_for_sidorenko/amcs_for_graphon_demo.py')
reticulate::source_python('~/Conjectures_Code/graphons_for_sidorenko/amcs_graphons.py')
!pip install numba
pip! install numba
!pip install numba
reticulate::repl_python()
reticulate::source_python('~/Conjectures_Code/graphons_for_sidorenko/amcs_for_graphon_demo.py')
reticulate::source_python('~/Conjectures_Code/graphons_for_sidorenko/amcs_graphons.py')
reticulate::source_python('~/Conjectures_Code/graphons_for_sidorenko/amcs_for_graphon_demo.py')
reticulate::py_config()
reticulate::source_python('~/Conjectures_Code/graphons_for_sidorenko/amcs_for_graphon_demo.py')
python amcs_for_graphon_demo
python amcs_for_graphon_demo.py
python amcs_for_graphon_demo.py
reticulate::source_python('~/Conjectures_Code/graphons_for_sidorenko/helpers.py')
reticulate::source_python('~/Conjectures_Code/graphons_for_sidorenko/amcs_graphons.py')
reticulate::source_python('~/Conjectures_Code/graphons_for_sidorenko/amcs_for_graphon_demo.py')
reticulate::py_last_error()
reticulate::repl_python()
reticulate::source_python('~/Conjectures_Code/graphons_for_sidorenko/amcs_for_graphon_demo.py')
reticulate::source_python('~/Conjectures_Code/graphons_for_sidorenko/helpers.py')
reticulate::source_python('~/Conjectures_Code/graphons_for_sidorenko/amcs_for_graphon_demo.py')
reticulate::repl_python()
